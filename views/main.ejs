<!DOCTYPE html>
<html lang="en">
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+ph61jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js" integrity="sha384-SR1sx49pcuLnqZUnnPwx6FCym0wLsk5JZuNx2bPPENzswTNFaQU1RDvt3wT4gWFG" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.min.js" integrity="sha384-j0CNLUeiqtyaRmlzUHCPZ+Gy5fQu0dQ6eZ/xAww941Ai1SxSY+0EQqNXNE6DZiVc" crossorigin="anonymous"></script>
    <script src="https://apis.google.com/js/api.js"></script>
    <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
    rel="stylesheet">
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous"/>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <link rel="stylesheet" type="text/css" href="css/style.css" />

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <meta charset="UTF-8">
    <title>Document</title>
    <script src="https://apis.google.com/js/api.js"></script>
    <script>
    
    const API_KEY = "AIzaSyBHaqk2GKbbWoQW7exIXfWGsr1sndPDWf4";
    const CLIENT_ID = "713860404856-c59se7k5c66mr32cpufi1l7thfmmompn.apps.googleusercontent.com";
    const MAX_MESSAGES = 10;
    let userMailAddress = '';
    const labels = {
        INBOX : "INBOX", 
        SENT : "SENT", 
        UNREAD : "UNREAD",
        DRAFTS : "DRAFTS"
    }

    label = labels.INBOX;

    function authenticate() {
        hideBody();
        
        return gapi.auth2.getAuthInstance()
            .signIn({scope: "https://mail.google.com/ https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://www.googleapis.com/auth/gmail.readonly"})
            .then(function() { console.log("Sign-in successful"); },
                function(err) { console.error("Error signing in", err); });
    }

    function loadClient() {
        gapi.client.setApiKey(API_KEY);
        return gapi.client.load("https://gmail.googleapis.com/$discovery/rest?version=v1")
            .then(function() { console.log("GAPI client loaded for API"); 
                                showBody();
                                getEmailAddress(); },
                function(err) { console.error("Error loading GAPI client for API", err); })
                ;
    }

    function showSpinner(id){
        let div = document.getElementById(id);
        div.innerHTML = 
        '<div class="enclose-div center-vh">'
            + '<div class="spinner-border text-warning" role="status">'
                +'<span class="sr-only">Loading...</span>'
            + '</div>'
        + '</div>';
    }

    function showLogo(){
        let messageDiv = document.getElementById("display-message");
        messageDiv.innerHTML = 
        '<div class="enclose-div center-vh">'
            + '<i class="bi bi-envelope-fill fa-10x"></i>'
        + '</div>'
    }

    function hideBody(){
        document.getElementsByTagName("BODY")[0].hidden = true;
    }
    function showBody(){
        document.getElementsByTagName("BODY")[0].hidden = false;
        showLogo();
    }

    function signOut() {
        gapi.auth2.getAuthInstance().signOut();   
        document.getElementById("messages").innerHTML = ""; 
        authenticate().then(loadClient).then(fetchMessages);
    }

    function getEmailAddress() {

        return gapi.client.gmail.users.getProfile({"userId" : 'me'})
            .then(function(response) {                
                userMailAddress = response.result.emailAddress;
            },
            function(err) { console.error("Execute error", err); });
    }

    function getHeaderAsJson(headers){
        headersJson = {};
        headers.forEach(header => {
            headersJson[header.name] = header.value;
        });
        return headersJson;
    }

    function searchHeader(headers, search){
        headers.forEach(header => {
            if(header.name == search){
                return header.value;
            }
        })
    }

    function addZero(i) {
        if (i < 10) {i = "0" + i}
        return i;
    }

    function sameDay(d1, d2) {
        return d1.getFullYear() === d2.getFullYear() &&
        d1.getMonth() === d2.getMonth() &&
        d1.getDate() === d2.getDate();
    }

    function sameYear(d1, d2){
        // d1 > d2
        return d1.getFullYear() === d2.getFullYear()
    }

    function getDateTime(d){
        var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        
        let date = new Date(parseInt(d));
        let now = new Date();
        console.log(now + " " + date);
        if(sameDay(now, date)){
            return addZero(date.getHours()) + ":" + addZero(date.getMinutes());
        }
        if(sameYear(now, date)){
            return days[date.getDay()] + " " + addZero(date.getDate()) + "-" + addZero(date.getMonth());
        }
    }

    function changeLabel(newLabel){
        console.log(newLabel);
        if(newLabel !== label){
            label = newLabel;
            console.log("Fetching " + label);
            showLogo();
            document.getElementById('mail-label').innerHTML = label;
            if(label == labels.DRAFTS){
                fetchMessages('drafts');
            }
            else{
                fetchMessages();
            }
            
        }
    }

    function fetchDrafts(){
        return gapi.client.gmail.users.drafts.list({"userId" : "me"})
        .then(function(response) {
            let messages = response.result.drafts;
            console.log(messages);
            listMessages(messages);            
        });
    }

    function fetchMessages(type='messages'){
            
        return gapi.client.gmail.users.messages.list({ userId : 'me' , labelIds : label, maxResults : MAX_MESSAGES})
        .then(function(response) {
            let messages = response.result[type];
            console.log(messages);
            listMessages(messages, type);            
        });
    }

    function getDate(messageId){
        return gapi.client.gmail.users.messages.get({"userId" : 'me', "id" : messageId, format : 'minimal'})
            .then(function(response){
                return response.result.internalDate;
            });        
    }

    // async function getDates(messages){
    //     dates = {}
    //     messages.forEach(message => {
    //         dates[message.id] = await getDate(message.id);
    //     });
    //     console.log("returning dates");
    //     console.log(dates);
    //     return dates;
    // }

    function listMessages(messages, type){        
        console.log(messages);
        dates = {};
        let promises = [];
        messages.forEach(message => {
            promises.push(getDate(message.id));
        });
        Promise.all(promises).then(function(values){
            console.log(values);
            for(let i = 0; i < messages.length; i++){
                dates[messages[i].id] =parseInt( values[i]);
            }
            messages.forEach(message => {
            console.log(message.id);
            console.log(dates[message.id]);
            })
            console.log("Dates received sorted");
            console.log(dates);
            messages.sort(function(a) {-(dates[a.id])});
            console.log("Sorted messages");
            console.log("Ready to put messages");
            console.log(messages);
            console.log(dates);
            messages.forEach(message => {
                console.log(message.id, typeof(message.id));
                console.log(dates[message.id]);
            })
            for(let i = 0; i < messages.length; i++){
                const messageId = (messages[i]["id"]);
                listMessage(messageId, type);              
            }
            // console.log("Printing romises");
            // console.log(values);
        });
        // console.log("printing from date", Object.keys(dates));
        // for(d in dates){
        //     console.log(d, dates[d]);
        // }
        // console.log(dates['17d7ba3d4b805484']);
        // for(m in messages){
        //     console.log(typeof(m));
        // }
        
    }

    function listMessage(messageId, type){
        let messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML = "";
        return gapi.client.gmail.users[type].get({"userId" : 'me', "id" : messageId})
            .then(function(response){
                const snippet = response.result["snippet"];                
                headersJson = getHeaderAsJson(response.result.payload.headers);
                let from = headersJson.From;
                let subject = headersJson.Subject;
                // console.log("Id : " + messageId);  
                // console.log("From : " + subject); 
                // console.log("Subject : " + subject); 
                // console.log("Snippet : " + snippet); 
                let newMessage = document.createElement('button');
                newMessage.type = 'button';
                newMessage.onclick = function (){
                    console.log("Displaying message");
                    return gapi.client.gmail.users[type].get({"userId" : 'me', "id" : messageId})
                        .then(function(response){
                            json = response.result;
                            headers = json.payload.headers;
                            headersJson = {};
                            headers.forEach(header => {
                                headersJson[header.name] = header.value;
                            });
                            
                            document.getElementById("display-message").innerHTML = 
                                                '<div class="email-details">'
                                                    + '<h5 class="subject">' + headersJson.Subject + '</h5>'
                                                    + '<div class="logo-from-date">'
                                                        + '<div class="logo-display-message"><div class="center-vh">' + headersJson.From[0].toUpperCase() + '</div></div>'
                                                        + '<div class="from-date ">'
                                                        + '<div class="from">' + headersJson.From  + '</div>'
                                                        + '<div class="date">' + headersJson.Date + '</div>'
                                                    + '</div>'
                                                + '</div>';      
                            // parts.forEach(part => {
                            // if(part["mimeType"] == "text/html"){
                            //     messageHTML += (atob(part["body"]["data"].replace(/-/g, '+').replace(/_/g, '/')))
                            // }
                            // });
                            let messageHTML = addMessagePart(json.payload);
                            if(messageHTML.length == 0 && json.payload.mimeType == 'text/plain' && json.payload.body.data !== undefined){
                                messageHTML = (atob(json.payload.body.data.replace(/-/g, '+').replace(/_/g, '/')));
                            }
                            //console.log(messageHTML);
                            document.getElementById("display-message").innerHTML += messageHTML;
                        })
                };
                newMessage.classList = "message list-group-item list-group-item-action ";
                
                newMessage.innerHTML = 
                '<div class="row">'
                    + '<div class="message-overview col-10">'
                        + '<div class="overflow">' + from + '</div>'
                        + '<div class="overflow">' + subject + '</div>'
                        + '<div class="overflow">' + snippet + '</div>'
                    + '</div>'
                    + '<div class="date-time col-2">'
                        + getDateTime(response.result.internalDate)
                    + '</div>'

                + '</div>';
                messagesDiv.append(newMessage);
            }) 
    }

    function addMessagePart(messagePart){
        let messageHTML = "";
        //console.log(messagePart);
        if(messagePart.body.data !== undefined && (messagePart.mimeType == "text/html")){
            console.log("Yay text came");
            messageHTML = (atob(messagePart.body.data.replace(/-/g, '+').replace(/_/g, '/')));
            //console.log(messageHTML);
        }
        if(messagePart.parts !== undefined){
            messagePart.parts.forEach(part => {
                messageHTML += addMessagePart(part);
            });
        }
        return messageHTML;
    }   

    function setUpMessageDivForSendDetails(){
        let messageDiv = document.getElementById("display-message");
        console.log(userMailAddress);
        messageDiv.innerHTML = 
        '<form onsubmit="return sendMail();">'
        + '<div class="send-mail">'
            + '<input readonly id="from-send-mail" class="send-mail-element " type="text" value="From : ' + userMailAddress + '"//>'
            + '<div class="send-mail-element"><label>To: </label><input required id="to-send-mail" type="text" class=""></input></div>'
            + '<input id="subject-send-mail" type="text" class="send-mail-element"  placeholder="Subject"//><br>'
            + '<textarea id="content-send-mail" type="text" class="send-mail-element send-mail-content"  placeholder="Content"> </textarea>'
            + '<div>'
                + '<div class="row">'
                    + '<div class="col">'
                        +  '<button type="submit" class="btn btn-outline-secondary" title="Send"><i class="fas fa-paper-plane"></i></button>'
                    + '</div>'
                    + '<div class="col" style="text-align:right;">'
                        +  '<button type="button" class="btn btn-outline-secondary" onclick="showLogo()" title="Discard"><i class="bi bi-trash"></i></button>'
                    + '</div>'
                + '</div>'
            + '</div>'
        + '</form>'
    }

    function sendMail(){
        console.log("Sending mail");
        let messageInnerHTML = document.getElementById("display-message").innerHTML;
        console.log(messageInnerHTML);
        const to = document.getElementById("to-send-mail").value;
        const subject = document.getElementById("subject-send-mail").value;
        const content = document.getElementById("content-send-mail").value;
        const message = "From: " + userMailAddress + "\r\n" + 
                        "To: " + to + "\r\n" +
                        "Subject: " + subject + "\r\n\r\n" +
                        // 'Content-Type: text/plain; charset=utf-8\r\n' + 
                        // 'MIME-Version: 1.0\r\n' +
                        content;
        
        showSpinner("display-message");
        const encodedMessage = btoa(message).replace(/\+/g, '-').replace(/\//g, '_');
        gapi.client.gmail.users.messages.send({
            userId: 'me',
            resource: {
                raw: encodedMessage
            }
        }).then(function (res) { 
            console.log(res);
            document.getElementById("display-message").innerHTML = 
            '<div class="sent-mail-message-div"> '    
                + '<div class="alert alert-success sent-mail-message center-vh" role="alert">'
                    + '<p>Message sent</p>'
                + '</div>'
            + '</div>'
            }, function(err){                
                 console.log(err);
                 $('#invalid-message-modal').modal('show');
                 document.getElementById("display-message").innerHTML = 
                //  '<div class="sent-mail-message-div"> '    
                //     + '<div class="alert alert-danger sent-mail-message center-vh" role="alert">'
                //        + '<p>Error! Please try sending again</p>'
                //     + '</div>'
                // + '</div>';
                document.getElementById("display-message").innerHTML = messageInnerHTML;
                document.getElementById("to-send-mail").value = to;
                document.getElementById("subject-send-mail").value = subject;
                document.getElementById("content-send-mail").value = content;
            });
        return false;
    }

    gapi.load("client:auth2", function() {
        gapi.auth2.init({"client_id" : CLIENT_ID});
    });
    
    </script>   
</head>

<body  hidden onload="authenticate().then(loadClient).then(fetchMessages)">
    
    <div class="container-fluid full-height">
        <div class="modal fade" tabindex="-1" id="invalid-message-modal" role="dialog">
            <div class="modal-dialog">
            
              <div class="modal-content">
                <div class="modal-header" style="padding: 10px 20px;">
                    <h5><i class="bi bi-exclamation-triangle fa-2x"></i></h5>
                  <button type="button" class="btn btn-default" data-bs-dismiss="modal">&times;</button>
                  
                </div>
                <div class="modal-body"> 
                        <div class="alert alert-danger" role="alert">
                            <p>Please enter a valid recipient's address</p>
                         </div>
                </div>
              </div>
              
            </div>
          </div>
        <div class="row full-height ">

            <%- include('partials/sidebar'); %>

            <div class="col-4 body-background inbox">
                <h6 id="mail-label" class=" inbox-label">INBOX</h6>
                <div class="messages-div list-group" id="messages">
                    
                </div>               
            </div>
            <div class="col-5 outer-display-message body-background">
                <!-- Do not change display-message id, many functions alter it's innerHTML 
                    If you change, then don't forget to replace all instances of display-message in the file
                -->                
                <div id="display-message" class="display-message-div">
                    
                </div>
            </div>
        </div>
        
    </div>
</body>
</html>